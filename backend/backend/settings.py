"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os # <-- Ensure os is imported

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# SECRET_KEY is now defined in local_settings.py
# DEBUG is now defined in local_settings.py

# Set a safe default for DEBUG (False is safer for production)
DEBUG = False

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # ADDED: Register our new apps
    'api',
    'rest_framework',
    'corsheaders',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # ADDED: CORS Middleware for allowing frontend requests
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"

# Database definition moved to local_settings.py

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = "static/"

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ADDED: Allow our React frontend to talk to this backend
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# ADDED: Configure Django Rest Framework to use JWT for authentication
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

# Email settings (Password moved to local_settings.py)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.zoho.in'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'ramjivisualizations@zohomail.in'
# EMAIL_HOST_PASSWORD = '' # REMOVED - Defined in local_settings.py
DEFAULT_FROM_EMAIL = 'Visualization Software <ramjivisualizations@zohomail.in>'

# --- Media File Configuration for User Uploads ---
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# JWT Settings - Define structure, SIGNING_KEY set after local import
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=480),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    # 'SIGNING_KEY': SECRET_KEY, # <-- Temporarily removed, set AFTER import
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
}

# ==========================================================
# === IMPORT LOCAL SETTINGS (AT THE VERY BOTTOM) ===
# ==========================================================
SECRET_KEY = None # Define a default before the try block
try:
    # Construct the path relative to this settings file
    local_settings_path = os.path.join(os.path.dirname(__file__), 'local_settings.py')
    if os.path.exists(local_settings_path):
        from .local_settings import *
        print("Successfully loaded local_settings.py")
    else:
        print("Warning: local_settings.py not found. Using default settings.")
except ImportError:
    print("Warning: Could not import from local_settings.py.")
    pass # Continue execution even if import fails

# ==========================================================
# === SET JWT SIGNING KEY *AFTER* TRYING TO IMPORT ===
# ==========================================================
if SECRET_KEY: # Check if SECRET_KEY was successfully loaded
    SIMPLE_JWT['SIGNING_KEY'] = SECRET_KEY
else:
    # Handle the case where SECRET_KEY is still None (e.g., local_settings missing or empty)
    print("\n\nERROR: SECRET_KEY is not defined. Please ensure it is set in backend/local_settings.py\n\n")
    # In a production environment, you might raise ImproperlyConfigured here:
    # from django.core.exceptions import ImproperlyConfigured
    # raise ImproperlyConfigured("SECRET_KEY is not defined. Please ensure it is set in local_settings.py")

# ==========================================================